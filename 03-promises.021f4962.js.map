{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,UAAWL,SAASC,cAAc,0BAGpC,SAASK,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,SAACC,EAAQC,GAC1B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,QAAQC,IAAIJ,GACZK,YAAY,WACNL,EACFF,EAAQ,CAACF,WAASL,UAGlBQ,EAAO,CAACH,WAASL,S,GAChBA,E,IAsBTJ,EAAKC,KAAKkB,iBAAiB,UAlBV,SAACC,GAGhB,GAFAA,EAAMC,iBACNL,QAAQC,IAAIjB,EAAKM,OAAOgB,OACpBC,OAAOC,SAASxB,EAAKM,OAAOgB,OAAO,GAAKC,OAAOC,SAASxB,EAAKK,KAAKiB,OAAO,GAAKC,OAAOC,SAASxB,EAAKI,MAAMkB,OAAO,EACnHG,EAAA3B,GAAS4B,OAAOC,QAAQ,8CAIzB,IAFA,IAAIC,EAAaL,OAAOC,SAASxB,EAAKI,MAAMkB,OACtCO,EAAYN,OAAOC,SAASxB,EAAKK,KAAKiB,OACnCQ,EAAQ,EAAGA,GAAS9B,EAAKM,OAAOgB,MAAOQ,IAChDtB,EAAcsB,EAAOF,GAAYG,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUL,EAAK4B,EAAL5B,MACjDqB,EAAA3B,GAAS4B,OAAOO,QAAQ,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAAN9B,EAAM,M,IAEvE+B,OAAM,SAAAH,G,IAAGvB,EAAQuB,EAARvB,SAAUL,EAAK4B,EAAL5B,MAClBqB,EAAA3B,GAAS4B,OAAOC,QAAQ,sBAAqCO,OAAfzB,EAAS,QAAYyB,OAAN9B,EAAM,M,IAErEwB,GAAcC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btnSubmit: document.querySelector('button[type=\"submit\"]'),\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve,reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    console.log(shouldResolve);\n    setTimeout( () =>{    \n      if (shouldResolve) {\n        resolve({position,delay});\n      }\n      else {\n        reject({position,delay});\n      }},delay);\n    })\n}\n\nconst onSubmit = (event) => {\n  event.preventDefault();\n  console.log(refs.amount.value);\n  if (Number.parseInt(refs.amount.value)<0 || Number.parseInt(refs.step.value)<0 || Number.parseInt(refs.delay.value)<0)\n  {Notiflix.Notify.failure(\"Enter positive values ​​in all fields\");}\n  else {\n  let localDelay = Number.parseInt(refs.delay.value);\n  const localStep = Number.parseInt(refs.step.value);\n  for (let index = 1; index <= refs.amount.value; index++) {\n  createPromise(index, localDelay).then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  }); \n  localDelay += localStep;}\n}}\n\nrefs.form.addEventListener('submit', onSubmit);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","btnSubmit","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","console","log","setTimeout","addEventListener","event","preventDefault","value","Number","parseInt","$parcel$interopDefault","Notify","failure","localDelay","localStep","index","then","param","success","concat","catch"],"version":3,"file":"03-promises.021f4962.js.map"}