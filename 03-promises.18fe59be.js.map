{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,UAAWL,SAASC,cAAc,0BAGpC,SAASK,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,CAACC,EAAQC,KAC1B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACF,E,MAASL,IAGlBQ,EAAO,C,SAACH,E,MAASL,GAAO,GACvBA,EAAM,G,CA4BfJ,EAAKC,KAAKgB,iBAAiB,UAxBTC,IAEhB,GADAA,EAAMC,iBACFC,OAAOC,SAASrB,EAAKM,OAAOgB,OAAO,GAAKF,OAAOC,SAASrB,EAAKK,KAAKiB,OAAO,GAAKF,OAAOC,SAASrB,EAAKI,MAAMkB,QAAQ,EAEjHC,EAAAzB,GAAS0B,OAAOC,QAAQ,6CAEnB,CACP,IAAIC,EAAaN,OAAOC,SAASrB,EAAKI,MAAMkB,OAC5C,MAAMK,EAAYP,OAAOC,SAASrB,EAAKK,KAAKiB,OAC5C,IAAK,IAAIM,EAAQ,EAAGA,GAAS5B,EAAKM,OAAOgB,MAAOM,IAC9CpB,EAAcoB,EAAOF,GAClBG,MAAK,EAACpB,SAAEA,EAAQL,MAAEA,MACjBmB,EAAAzB,GAAS0B,OAAOM,QAAQ,uBAAqBrB,QAAiBL,MAAU,IAEzE2B,OAAM,EAACtB,SAAEA,EAAQL,MAAEA,MAClBmB,EAAAzB,GAAS0B,OAAOC,QAAQ,sBAAoBhB,QAAeL,MAAU,IAEzEsB,GAAcC,C,CAIlB3B,EAAKC,KAAK+B,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btnSubmit: document.querySelector('button[type=\"submit\"]'),\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve,reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() =>{    \n      if (shouldResolve) {\n        resolve({position,delay});\n      }\n      else {\n        reject({position,delay});\n      }},delay);\n    })\n}\n\nconst onSubmit = (event) => {\n  event.preventDefault();\n  if (Number.parseInt(refs.amount.value)<0 || Number.parseInt(refs.step.value)<0 || Number.parseInt(refs.delay.value)<=0)\n    {\n      Notiflix.Notify.failure(\"Enter positive values ​​in all fields\");\n    }\n  else {\n    let localDelay = Number.parseInt(refs.delay.value);\n    const localStep = Number.parseInt(refs.step.value);\n    for (let index = 1; index <= refs.amount.value; index++) {\n      createPromise(index, localDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        }); \n      localDelay += localStep;\n      \n    }\n  }\n  refs.form.reset();\n}\n\nrefs.form.addEventListener('submit', onSubmit);"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","btnSubmit","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","Number","parseInt","value","$parcel$interopDefault","Notify","failure","localDelay","localStep","index","then","success","catch","reset"],"version":3,"file":"03-promises.18fe59be.js.map"}