{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,UAAWL,SAASC,cAAc,0BAGpC,SAASK,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,SAACC,EAAQC,GAC1B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAACF,WAASL,UAGlBQ,EAAO,CAACH,WAASL,S,GAChBA,E,IA4BTJ,EAAKC,KAAKgB,iBAAiB,UAxBV,SAACC,GAEhB,GADAA,EAAMC,iBACFC,OAAOC,SAASrB,EAAKM,OAAOgB,OAAO,GAAKF,OAAOC,SAASrB,EAAKK,KAAKiB,OAAO,GAAKF,OAAOC,SAASrB,EAAKI,MAAMkB,QAAQ,EAEjHC,EAAAzB,GAAS0B,OAAOC,QAAQ,8CAK1B,IAFA,IAAIC,EAAaN,OAAOC,SAASrB,EAAKI,MAAMkB,OACtCK,EAAYP,OAAOC,SAASrB,EAAKK,KAAKiB,OACnCM,EAAQ,EAAGA,GAAS5B,EAAKM,OAAOgB,MAAOM,IAC9CpB,EAAcoB,EAAOF,GAClBG,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUL,EAAK0B,EAAL1B,MACjBmB,EAAAzB,GAAS0B,OAAOO,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUL,EAAK0B,EAAL1B,MAClBmB,EAAAzB,GAAS0B,OAAOC,QAAQ,sBAAqCO,OAAfvB,EAAS,QAAYuB,OAAN5B,EAAM,M,IAEvEsB,GAAcC,EAIlB3B,EAAKC,KAAKiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btnSubmit: document.querySelector('button[type=\"submit\"]'),\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve,reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() =>{    \n      if (shouldResolve) {\n        resolve({position,delay});\n      }\n      else {\n        reject({position,delay});\n      }},delay);\n    })\n}\n\nconst onSubmit = (event) => {\n  event.preventDefault();\n  if (Number.parseInt(refs.amount.value)<0 || Number.parseInt(refs.step.value)<0 || Number.parseInt(refs.delay.value)<=0)\n    {\n      Notiflix.Notify.failure(\"Enter positive values ​​in all fields\");\n    }\n  else {\n    let localDelay = Number.parseInt(refs.delay.value);\n    const localStep = Number.parseInt(refs.step.value);\n    for (let index = 1; index <= refs.amount.value; index++) {\n      createPromise(index, localDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        }); \n      localDelay += localStep;\n      \n    }\n  }\n  refs.form.reset();\n}\n\nrefs.form.addEventListener('submit', onSubmit);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","btnSubmit","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","Number","parseInt","value","$parcel$interopDefault","Notify","failure","localDelay","localStep","index","then","param","success","concat","catch","reset"],"version":3,"file":"03-promises.d6942be2.js.map"}